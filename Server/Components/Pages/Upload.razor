@page "/upload"
@using System.ComponentModel.DataAnnotations
@using System.IO.Compression
@using System.Security.Cryptography
@using System.Text.Json
@using Microsoft.Data.Sqlite
@rendermode InteractiveServer

<div class="d-flex align-items-center justify-content-center vh-100">
    <div class="w-100" style="max-width: 600px;">
        <h3 class="text-center">提交新版本文件</h3>
        <div class="card shadow-sm p-4">
            <EditForm FormName="uploadForm" Model="@_uploadModel" OnValidSubmit="@HandleValidSubmit">
                <DataAnnotationsValidator/>
                <ValidationSummary/>

                <div class="mb-3">
                    <label for="file_upload" class="form-label">上传文件（ZIP 格式）：</label>
                    <InputFile id="file_upload" name="file_upload" OnChange="@LoadFiles" accept=".zip" class="form-control"/>
                    @if (!string.IsNullOrEmpty(_fileError))
                    {
                        <div class="text-danger">@_fileError</div>
                    }
                    <ValidationMessage For="@(() => _uploadModel.File)"/>
                </div>

                <div class="mb-3">
                    <label for="name" class="form-label">名称：</label>
                    <InputText placeholder="******" id="name" name="name" @bind-Value="_uploadModel.Name" class="form-control"/>
                    <ValidationMessage For="@(() => _uploadModel.Name)"/>
                </div>

                <div class="mb-3">
                    <label for="version" class="form-label">版本号：</label>
                    <InputText placeholder="1.0.0" id="version" name="version" @bind-Value="_uploadModel.Version" class="form-control"/>
                    <ValidationMessage For="@(() => _uploadModel.Version)"/>
                </div>

                <div class="mb-3">
                    <label for="startup_file" class="form-label">启动文件：</label>
                    <InputText placeholder="start.exe" id="startup_file" name="startup_file" @bind-Value="_uploadModel.StartupFile" class="form-control"/>
                    <ValidationMessage For="@(() => _uploadModel.StartupFile)"/>
                </div>

                @if (_showProgress)
                {
                    <div class="progress mb-3" style="height: 20px;">
                        <div class="progress-bar" role="progressbar" style="width:@($"{_progressPercentage}%")" aria-valuenow="@_progressPercentage" aria-valuemin="0" aria-valuemax="100">
                            @_progressPercentage%
                        </div>
                    </div>
                }

                @if (!string.IsNullOrEmpty(_showSuccessMessage))
                {
                    <div class="alert alert-success mt-3 text-lg-start" role="alert" style="white-space: pre-line">
                        @_showSuccessMessage
                    </div>
                }

                <button type="submit" class="btn btn-primary w-100" disabled="@(!_canSubmit)">提交</button>
            </EditForm>
        </div>
    </div>
</div>

<style>
    body {
        background-color: #f8f9fa;
    }

    .vh-100 {
        height: 100vh;
    }

    .card {
        background-color: white;
        border-radius: 10px;
    }

    h3.text-center {
        color: #343a40;
    }

    .btn-primary {
        background-color: #007bff;
        border-color: #007bff;
    }

    .btn-primary:hover {
        background-color: #0056b3;
        border-color: #0056b3;
    }

    .progress {
        background-color: #e9ecef;
    }

    .progress-bar {
        background-color: #007bff;
        transition: width 0.1s ease;
    }
</style>

@code {
    private readonly UploadModel _uploadModel = new();
    private IBrowserFile? _selectedFile;
    private string? _fileError;
    private bool _showProgress;
    private double _progressPercentage;
    private bool _canSubmit;
    private string? _showSuccessMessage;

    private void LoadFiles(InputFileChangeEventArgs e)
    {
        _fileError = null;
        _canSubmit = false;
        var files = e.GetMultipleFiles(1);
        if (files.Count == 0) return;

        _selectedFile = files[0];
        var fileName = _selectedFile.Name.ToLower();

        if (!fileName.EndsWith(".zip"))
        {
            _fileError = "只能上传 ZIP 格式的文件";
            return;
        }

        _uploadModel.File = _selectedFile;
        _canSubmit = true;
    }

    private async Task HandleValidSubmit()
    {
        if (_selectedFile == null || !_canSubmit)
        {
            _fileError = "无效的文件";
            return;
        }

        _showProgress = true;
        _progressPercentage = 0;

        // 上传到本地目录
        await SaveFileToLocalAsync(_selectedFile);
        var uploadPath = Path.Combine(Directory.GetCurrentDirectory(), "upload");
        var filePath = Path.Combine(uploadPath, _selectedFile.Name);
        // 解压文件
        await UnZipFileAsync(filePath, _uploadModel.Name!, _uploadModel.Version!, _uploadModel.StartupFile!);
        // 分析文件
        var targetFolder = Path.Combine(uploadPath, $"{_uploadModel.Name}-{_uploadModel.Version}");
        await AnalysisFileAsync(targetFolder, _uploadModel.Name!, _uploadModel.Version!);
        // 写入到版本数据库
        await UpdateVersionDatabase(_uploadModel.Name!, _uploadModel.Version!, _uploadModel.StartupFile!);
        _showSuccessMessage += "新版本程序提交完成！\n";
        _showProgress = false;
        _progressPercentage = 0;
    }

    private async Task UpdateVersionDatabase(string name, string version, string startupFile)
    {
        _showSuccessMessage += "正在更新版本数据库...\n";
        _progressPercentage = 99;
        await InvokeAsync(StateHasChanged);
        var dbPath = Path.Combine(Directory.GetCurrentDirectory(), "version.db");
        var connectionString = $"Data Source={dbPath}";
        try
        {
            await using var connection = new SqliteConnection(connectionString);
            await connection.OpenAsync();

            // 创建表（如果不存在）
            var createTableCmd = connection.CreateCommand();
            createTableCmd.CommandText = @"
            CREATE TABLE IF NOT EXISTS versions (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT NOT NULL,
                version TEXT NOT NULL,
                startupFile TEXT NOT NULL,
                createTime DATETIME DEFAULT CURRENT_TIMESTAMP
            )";
            await createTableCmd.ExecuteNonQueryAsync();

            // 插入新记录
            var insertCmd = connection.CreateCommand();
            insertCmd.CommandText = @"
            INSERT INTO versions (name, version , startupFile)
            VALUES (@name, @version , @startupFile)";
            insertCmd.Parameters.AddWithValue("@name", name);
            insertCmd.Parameters.AddWithValue("@version", version);
            insertCmd.Parameters.AddWithValue("@startupFile", startupFile);
            await insertCmd.ExecuteNonQueryAsync();

            _showSuccessMessage += $"成功写入数据库：{name}-{version}-{startupFile}\n";
            _progressPercentage = 100;
        }
        catch (Exception ex)
        {
            _showSuccessMessage += $"数据库更新失败：{ex.Message}\n";
        }
        finally
        {
            await InvokeAsync(StateHasChanged);
        }
    }


    // 提取文件
    private async Task UnZipFileAsync(string filePath, string name, string version, string startupFile)
    {
        _showSuccessMessage += "正在解压Zip（可关闭浏览器）......\n";
        await InvokeAsync(StateHasChanged);
        _progressPercentage = 80;
        // 解压文件到upload目录，创建目录：name-version
        var uploadPath = Path.Combine(Directory.GetCurrentDirectory(), "upload");
        var targetFolder = Path.Combine(uploadPath, $"{name}-{version}");
        if (Directory.Exists(targetFolder))
        {
            Directory.Delete(targetFolder, true); // 如果存在先删除旧目录
        }

        Directory.CreateDirectory(targetFolder);
        // 解压 ZIP 文件
        try
        {
            await using (var stream = new FileStream(filePath, FileMode.Open))
            {
                var archive = new ZipArchive(stream, ZipArchiveMode.Read);
                for (var i = 0; i < archive.Entries.Count; i++)
                {
                    var entry = archive.Entries[i];
                    if (string.IsNullOrEmpty(entry.Name)) continue; // 跳过空目录

                    var destinationPath = Path.Combine(targetFolder, entry.FullName);
                    var destinationDir = Path.GetDirectoryName(destinationPath);

                    if (!Directory.Exists(destinationDir))
                    {
                        Directory.CreateDirectory(destinationDir!);
                    }

                    entry.ExtractToFile(destinationPath, true);
                    var pro = i * 1.0 / archive.Entries.Count * 100 * 0.1;
                    _progressPercentage = 80 + pro;
                }
            }

            // 检查是否包含启动文件
            var startupFilePath = Path.Combine(targetFolder, startupFile);
            if (!File.Exists(startupFilePath))
            {
                _showSuccessMessage += $"未找到启动文件 {startupFile}！\n";
            }
            else
            {
                _showSuccessMessage += $"找到启动文件：{startupFile}\n";
            }
        }
        catch (Exception ex)
        {
            _showSuccessMessage += $"解压失败：{ex.Message}\n";
        }
        finally
        {
            _showSuccessMessage += "解压完成!\n";
            _progressPercentage = 90; // 留下10%给分析
            await InvokeAsync(StateHasChanged);
        }
    }

    // 分析文件
    private async Task AnalysisFileAsync(string folderPath, string name, string version)
    {
        _progressPercentage = 90;
        await InvokeAsync(StateHasChanged);
        var jsonPath = Path.Combine(folderPath, "..", $"{name}-{version}.json");
        if (File.Exists(jsonPath))
        {
            File.Delete(jsonPath);
        }

        var files = Directory.GetFiles(folderPath, "*.*", SearchOption.AllDirectories);
        var fileHashes = new Dictionary<string, string>();
        for (var i = 0; i < files.Length; i++)
        {
            var file = files[i];
            var relativePath = file.Substring(folderPath.Length + 1); // 去掉根目录路径
            var md5 = await ComputeMd5Async(file);
            fileHashes[relativePath] = md5;
            var pro = i * 1.0 / files.Length * 100 * 0.09;
            _progressPercentage = 90 + pro;
        }

        var json = JsonSerializer.Serialize(fileHashes, new JsonSerializerOptions { WriteIndented = true });

        await File.WriteAllTextAsync(jsonPath, json);

        _showSuccessMessage += $"JSON文件已创建：{jsonPath}\n";
        _progressPercentage = 99; // 全部分析完成 , 剩下1给数据库
        await InvokeAsync(StateHasChanged);
    }

    // 获取文件md5
    private static async Task<string> ComputeMd5Async(string filePath)
    {
        using var md5 = MD5.Create();
        await using var stream = File.OpenRead(filePath);
        var hash = await md5.ComputeHashAsync(stream);
        return BitConverter.ToString(hash).Replace("-", "").ToLowerInvariant();
    }

    private async Task SaveFileToLocalAsync(IBrowserFile file)
    {
        const int bufferSize = 1024 * 10; // 10KB
        var buffer = new byte[bufferSize];

        var uploadPath = Path.Combine(Directory.GetCurrentDirectory(), "upload");

        if (!Directory.Exists(uploadPath))
        {
            Directory.CreateDirectory(uploadPath);
        }

        var filePath = Path.Combine(uploadPath, file.Name);
        // 如果存在则删除
        if (File.Exists(filePath))
        {
            File.Delete(filePath);
        }

        await using var stream = file.OpenReadStream(file.Size);
        await using var fileStream = new FileStream(filePath, FileMode.Create, FileAccess.Write);

        long totalRead = 0;

        while (totalRead < file.Size)
        {
            var read = await stream.ReadAsync(buffer, 0, bufferSize);
            if (read == 0) break;

            await fileStream.WriteAsync(buffer, 0, read);
            totalRead += read;

            _progressPercentage = (double)totalRead / file.Size * 100 * 0.8; // 留20%给分析

            await InvokeAsync(StateHasChanged);
        }

        _showSuccessMessage += $"文件已保存至：{filePath}\n";
    }

    public class UploadModel
    {
        public IBrowserFile? File { get; set; }

        [Required(ErrorMessage = "请输入名称")] public string? Name { get; set; }

        [Required(ErrorMessage = "请输入版本号")] public string? Version { get; set; }

        [Required(ErrorMessage = "请输入启动文件名")] public string? StartupFile { get; set; }
    }

}